+ FUZZER=wolfmqtt-fuzzer
+ shift
+ '[' '!' -v TESTCASE ']'
+ TESTCASE=/testcase
+ '[' '!' -f /testcase ']'
+ export RUN_FUZZER_MODE=interactive
+ RUN_FUZZER_MODE=interactive
+ export FUZZING_ENGINE=libfuzzer
+ FUZZING_ENGINE=libfuzzer
+ export SKIP_SEED_CORPUS=1
+ SKIP_SEED_CORPUS=1
+ run_fuzzer wolfmqtt-fuzzer -runs=100 /testcase
vm.mmap_rnd_bits = 28
/out/wolfmqtt-fuzzer -rss_limit_mb=2560 -timeout=25 -runs=100 /testcase < /dev/null
Running with entropic power schedule (0xFF, 100).
Seed: 3089895039
Loaded 1 modules   (19062 inline 8-bit counters): 19062 [0x55c8c1e91410, 0x55c8c1e95e86),
Loaded 1 PC tables (19062 PCs): 19062 [0x55c8c1e95e88,0x55c8c1ee05e8),
/out/wolfmqtt-fuzzer: Running 1 inputs 100 time(s) each.
Running: /testcase
=================================================================
==14==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x5070000000e0 at pc 0x55c8c1c740d9 bp 0x7ffc82114230 sp 0x7ffc82114228
WRITE of size 1 at 0x5070000000e0 thread T0
SCARINESS: 31 (1-byte-write-heap-buffer-overflow)
#0 0x55c8c1c740d8 in MqttClient_DecodePacket mqtt_client.c
#1 0x55c8c1c6ff6f in MqttClient_WaitType mqtt_client.c
#2 0x55c8c1c6eea3 in MqttClient_Connect (/out/wolfmqtt-fuzzer+0x249ea3)
#3 0x55c8c1c5a5e5 in wolfMQTTFuzzer::Initialize() (/out/wolfmqtt-fuzzer+0x2355e5)
#4 0x55c8c1c5b94c in LLVMFuzzerTestOneInput (/out/wolfmqtt-fuzzer+0x23694c)
#5 0x55c8c1b06390 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:614:13
#6 0x55c8c1af1605 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:327:6
#7 0x55c8c1af709f in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:862:9
#8 0x55c8c1b22342 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
#9 0x7fb540930082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082) (BuildId: 5792732f783158c66fb4f3756458ca24e46e827d)
#10 0x55c8c1ae97ed in _start (/out/wolfmqtt-fuzzer+0xc47ed)
DEDUP_TOKEN: MqttClient_DecodePacket--MqttClient_WaitType--MqttClient_Connect
0x5070000000e0 is located 0 bytes after 80-byte region [0x507000000090,0x5070000000e0)
allocated by thread T0 here:
#0 0x55c8c1c4f52d in operator new(unsigned long) /src/llvm-project/compiler-rt/lib/asan/asan_new_delete.cpp:86:3
#1 0x55c8c1c58919 in wolfMQTTFuzzer::wolfMQTTFuzzer(fuzzing::datasource::Datasource&) (/out/wolfmqtt-fuzzer+0x233919)
#2 0x55c8c1c5b93e in LLVMFuzzerTestOneInput (/out/wolfmqtt-fuzzer+0x23693e)
#3 0x55c8c1b06390 in fuzzer::Fuzzer::ExecuteCallback(unsigned char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerLoop.cpp:614:13
#4 0x55c8c1af1605 in fuzzer::RunOneTest(fuzzer::Fuzzer*, char const*, unsigned long) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:327:6
#5 0x55c8c1af709f in fuzzer::FuzzerDriver(int*, char***, int (*)(unsigned char const*, unsigned long)) /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerDriver.cpp:862:9
#6 0x55c8c1b22342 in main /src/llvm-project/compiler-rt/lib/fuzzer/FuzzerMain.cpp:20:10
#7 0x7fb540930082 in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x24082) (BuildId: 5792732f783158c66fb4f3756458ca24e46e827d)
DEDUP_TOKEN: operator new(unsigned long)--wolfMQTTFuzzer::wolfMQTTFuzzer(fuzzing::datasource::Datasource&)--LLVMFuzzerTestOneInput
SUMMARY: AddressSanitizer: heap-buffer-overflow mqtt_client.c in MqttClient_DecodePacket
Shadow bytes around the buggy address:
0x506ffffffe00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
0x506ffffffe80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
0x506fffffff00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
0x506fffffff80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
0x507000000000: fa fa fa fa fd fd fd fd fd fd fd fd fd fa fa fa
=>0x507000000080: fa fa 00 00 00 00 00 00 00 00 00 00[fa]fa fa fa
0x507000000100: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
0x507000000180: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
0x507000000200: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
0x507000000280: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
0x507000000300: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
Shadow byte legend (one shadow byte represents 8 application bytes):
Addressable:           00
Partially addressable: 01 02 03 04 05 06 07
Heap left redzone:       fa
Freed heap region:       fd
Stack left redzone:      f1
Stack mid redzone:       f2
Stack right redzone:     f3
Stack after return:      f5
Stack use after scope:   f8
Global redzone:          f9
Global init order:       f6
Poisoned by user:        f7
Container overflow:      fc
Array cookie:            ac
Intra object redzone:    bb
ASan internal:           fe
Left alloca redzone:     ca
Right alloca redzone:    cb
==14==ABORTING
